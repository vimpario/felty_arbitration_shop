from aiogram import Router, F
from aiogram.enums import ContentType
from aiogram.types import Message, CallbackQuery, LabeledPrice, PreCheckoutQuery, SuccessfulPayment
from aiogram.fsm.context import FSMContext
from aiogram.filters.state import StateFilter
from loguru import logger
from sqlalchemy.ext.asyncio import AsyncSession
from bot.config import bot, settings
from bot.dao.dao import UserDAO, CategoryDao, ProductDao, PurchaseDao
from bot.user.kbs import main_user_kb, catalog_kb, product_kb, get_product_buy_kb, product_navigation_kb, purchase_count_kb
from bot.user.schemas import TelegramIDModel, ProductCategoryIDModel, PaymentData
from unittest.mock import AsyncMock

catalog_router = Router()

from aiogram import Router, F
from aiogram.types import Message, SuccessfulPayment
from unittest.mock import AsyncMock
from sqlalchemy.ext.asyncio import AsyncSession
import uuid
catalog_router = Router()

@catalog_router.callback_query(F.data == "catalog")
async def page_catalog(call: CallbackQuery, session_without_commit: AsyncSession):
    catalog_data = await CategoryDao.find_all(session=session_without_commit)

    await call.message.edit_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:",
        reply_markup=catalog_kb(catalog_data)
    )

@catalog_router.callback_query(F.data.startswith("category_"))
async def page_catalog_products(call: CallbackQuery, session_without_commit: AsyncSession):
    category_id = int(call.data.split("_")[-1])
    products_category = await ProductDao.find_all(session=session_without_commit,
                                                  filters=ProductCategoryIDModel(category_id=category_id, is_buyed=False))
    count_products = len(products_category)
    if count_products:
        await call.answer(f"–í –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {count_products} —Ç–æ–≤–∞—Ä–æ–≤.")
        # for product in products_category:
        product_text = (
            f"üì¶ <b>–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:</b> {products_category[0].name}\n\n"
            f"üí∞ <b>–¶–µ–Ω–∞:</b> {products_category[0].price} —Ä—É–±.\n\n"
            f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n<i>{products_category[0].description}</i>\n\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        )
        await call.message.answer(
            product_text,
            reply_markup=product_kb(products_category[0].id, products_category[0].price)
        )
        
    else:
        await call.answer("–í –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.")

@catalog_router.callback_query(F.data.startswith('buy_'))
async def initiate_purchase(call: CallbackQuery, state: FSMContext):
    logger.info(f"initiate_purchase call.data: {call.data}")
    _, product_id, price = call.data.split("_")
    msg = await call.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –∂–µ–ª–∞–µ—Ç–µ –∫—É–ø–∏—Ç—å:",
        reply_markup=purchase_count_kb()
    )
    
    await state.update_data(product_id=product_id, price=price, last_msg_id = msg.message_id)
    await state.set_state("waiting_quantity")
    logger.info(f"Received message: {msg.text}")
    logger.info(f"State: {await state.get_state()}")
    
@catalog_router.message(StateFilter("waiting_quantity"))
async def set_quantity(message: Message, state: FSMContext, session_with_commit: AsyncSession):
    state_data = await state.get_data()
    product_id = state_data.get("product_id")
    price = float(state_data.get("price"))
        
    try:
        logger.info(f"Message.text: {message.text}")
        quantity = int(message.text)
        if quantity <= 0:
            await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        return

    total_price = price * quantity
    user_info = await UserDAO.find_one_or_none(
        session=session_with_commit,
        filters=TelegramIDModel(telegram_id=message.from_user.id)
    )

    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—á–µ—Ç–∞ —Å payload: {user_info.id}_{product_id}_{quantity}")
    await bot.send_invoice(
        chat_id=message.from_user.id,
        title="–û–ø–ª–∞—Ç–∞",
        description=f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –æ–ø–ª–∞—Ç—É –Ω–∞ —Å—É–º–º—É {total_price} —Ä—É–±–ª–µ–π, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø –∫ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ç–æ–≤–∞—Ä–∞–º",
        payload=f"{user_info.id}_{product_id}_{quantity}",
        provider_token=settings.PROVIDER_TOKEN,
        currency="rub",
        prices=[LabeledPrice(label=f"–û–ø–ª–∞—Ç–∞ {total_price}", amount=int(total_price * 100))],
        reply_markup=get_product_buy_kb(total_price)
    )

    await message.delete()
    await state.set_state("waiting_payment")
    logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {await state.get_state()}")


@catalog_router.pre_checkout_query(lambda query: True)
async def pre_checkout_query(pre_checkout_q: PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_q.id, ok=True)

@catalog_router.message(F.content_type == ContentType.SUCCESSFUL_PAYMENT )
async def successful_payment(message: Message, state: FSMContext, session_with_commit: AsyncSession):
    payment_info = message.successful_payment
    logger.info(f"Payment_info {payment_info}")
    logger.info(f"payment_info.invoice_payload: {payment_info.invoice_payload}")
    user_id, product_id, quantity = payment_info.invoice_payload.split("_")
    logger.info(f"payment_info.invoice_payload: {payment_info.invoice_payload}")
    state_data = await state.get_data()
    quantity = int(quantity)
    logger.info(f"successful_payment quantity: {quantity}")
    product_data = await ProductDao.find_unpurchased_items(session=session_with_commit, limit=quantity)
    logger.info(f"Quantity after succ purchase: {quantity}")
    logger.info(f"Product data after succ purchase: {product_data}")

    for product in product_data[:quantity]:
        payment = PaymentData(
            user_id=int(user_id),
            payment_id=payment_info.telegram_payment_charge_id,
            price=payment_info.total_amount / 100,
            product_id=int(product.id)
        )
        await PurchaseDao.add(session=session_with_commit, values=payment)
        logger.info(f"Product name: {product.name}, Product ID: {product.id}")
        product.is_buyed = True
        session_with_commit.add(product) 
        for admin_id in settings.ADMIN_IDS:
            try:
                username = message.from_user.username
                user_info = f"@{username} ({message.from_user.id})" if username else f"—Å ID {message.from_user.id}"

                await bot.send_message(
                    chat_id=admin_id,
                    text=(
                        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_info} –∫—É–ø–∏–ª {quantity} —à—Ç. —Ç–æ–≤–∞—Ä–∞ <b>{product.name}</b> (ID: {product.id})"
                        f"–Ω–∞ —Å—É–º–º—É <b>{payment_info.total_amount / 100} ‚ÇΩ</b>"
                    )
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º: {e}")

    

        file_text = "<b>–¢–æ–≤–∞—Ä –≤–∫–ª—é—á–∞–µ—Ç —Ñ–∞–π–ª—ã:</b>" if product.file_id else "<b>–¢–æ–≤–∞—Ä –Ω–µ –≤–∫–ª—é—á–∞–µ—Ç —Ñ–∞–π–ª—ã:</b>"
        product_text = (
            f"üéâ <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!</b>\n\n"
            f"üõí <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º —Ç–æ–≤–∞—Ä–µ:</b>\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"üîπ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> <b>{product.name}</b>\n"
            f"üîπ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n<i>{product.description}</i>\n"
            f"üîπ <b>–¶–µ–Ω–∞:</b> <b>{product.price} ‚ÇΩ</b>\n"
            f"üîπ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> <b>{quantity} —à—Ç.</b>\n"
            f"üîπ <b>–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</b> <b>{payment_info.total_amount / 100} ‚ÇΩ</b>\n"
            f"{file_text}\n\n"
            f"‚ÑπÔ∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –≤–∞—à–∏—Ö –ø–æ–∫—É–ø–∫–∞—Ö –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –≤ –ª–∏—á–Ω–æ–º –ø—Ä–æ—Ñ–∏–ª–µ.</b>"
        )

        if product.file_id:
            await message.answer_document(
                document=product.file_id,
                caption=product_text,
                reply_markup=main_user_kb(message.from_user.id)
            )
        else:
            await message.answer(
                text=product_text,
                reply_markup=main_user_kb(message.from_user.id)
            )
    
    await session_with_commit.commit() 
    await state.clear()
    logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")



